function outputdata = gui_compile_iteration_results(varargin)
%UNTITLED3 Summary of this function goes here
%   Detailed explanation goes here

% Check if an instance of inputWindow already running
hs = findall(0,'tag','compileIterResultsWindow');
if (isempty(hs))
    hs = add_compile_iteration_results_window_components;
    set(hs.fig,'Visible','on');
else
    figure(hs);
end

%uiwait(hs.fig);
%delete(hs.fig);

% Define gui components
    function hs = add_compile_iteration_results_window_components
        
        % Add components, save handles in a struct
        hs.fig = figure('Tag','compileIterResultsWindow',...
            'units', 'normalized', 'position', [0.3 0.4 0.4 0.3],...
            'MenuBar', 'none',...
            'NumberTitle','off',...
            'Name','Input Results Information',...
            'Resize','off',...
            'Visible','off',...
            'Color', get(0,'defaultUicontrolBackgroundColor'),...
            'WindowStyle', 'modal');
                
        % Sub-panel for specifying analysis type and number of visits
        setupPanel = uipanel('BackgroundColor',get(0,'defaultUicontrolBackgroundColor'),...
            'Tag', 'setupPanel',...
            'Title', 'Setup',...
            'units', 'normalized',...
            'Position',[0.05, 0.6 0.9 0.39]); 
        setupPanelRatio  = setupPanel.Position(3) / setupPanel.Position(4); 
        
        % Output folder
        outputFolderSpecifyButton = uicontrol('Parent', setupPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Select Output Folder', ...
            'Units', 'Normalized', ...
            'Position', [0.05, 0.7, 0.25, 0.25], ...
            'Tag', 'outputFolderSpecifyButton',...
            'callback', @select_output_folder_callback); %#ok<NASGU>
        
        outputPath = uicontrol('Parent', setupPanel, ...
            'Style', 'Edit', ...
            'Units', 'Normalized', ...
            'Position', [0.35, 0.7, 0.5, 0.25], ...
            'Tag', 'outputPath', ...
            'enable', 'inactive',...
            'HorizontalAlignment','left',...
            'BackgroundColor','white'); %#ok<NASGU>
        
        outputPathSpecifyPathHelpButton = uicontrol('Parent', setupPanel, ...
            'Style', 'pushbutton', ...
            'String', '?', ...
            'Units', 'Normalized', ...
            'Position', [0.9, 0.7,...
            0.1 / setupPanelRatio, 0.1 * setupPanelRatio], ...
            'Tag', 'outputPathSpecifyPathHelpButton',...
            'callback', @open_outputPathSpecifyPathHelp); %#ok<NASGU>
        
        % Iteration Results
        iterResultsSpecifyButton = uicontrol('Parent', setupPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Select Iteration Results', ...
            'Units', 'Normalized', ...
            'Position', [0.05, 0.4, 0.25, 0.25], ...
            'Tag', 'iterResultsSpecifyButton',...
            'Callback', @select_iteration_results_callback); %#ok<NASGU>
        
        iterResultsSpecifyPath = uicontrol('Parent', setupPanel, ...
            'Style', 'Edit', ...
            'Units', 'Normalized', ...
            'Position', [0.35, 0.4, 0.5, 0.25], ...
            'Tag', 'iterResultsSpecifyPath', ...
            'enable', 'inactive',...
            'HorizontalAlignment','left',...
            'BackgroundColor','white'); %#ok<NASGU>
        
        iterResultsSpecifyPathHelpButton = uicontrol('Parent', setupPanel, ...
            'Style', 'pushbutton', ...
            'String', '?', ...
            'Units', 'Normalized', ...
            'Position', [0.9, 0.4,...
            0.1 / setupPanelRatio, 0.1 * setupPanelRatio], ...
            'Tag', 'iterResultsSpecifyPathHelpButton',...
            'Callback', @open_iterResultsSpecifyPathHelp); %#ok<NASGU>
        
        % Runinfo file
        runinfoSpecifyButton = uicontrol('Parent', setupPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Select Runinfo File', ...
            'Units', 'Normalized', ...
            'Position', [0.05, 0.1, 0.25, 0.25], ...
            'Tag', 'runinfoSpecifyButton',...
            'Callback', @select_runinfo_file_callback); %#ok<NASGU>
        
        runinfoSpecifyPath = uicontrol('Parent', setupPanel, ...
            'Style', 'Edit', ...
            'Units', 'Normalized', ...
            'Position', [0.35, 0.1, 0.5, 0.25], ...
            'Tag', 'runinfoSpecifyPath', ...
            'enable', 'inactive',...
            'HorizontalAlignment','left',...
            'BackgroundColor','white'); %#ok<NASGU>
        
        runinfoSpecifyPathHelpButton = uicontrol('Parent', setupPanel, ...
            'Style', 'pushbutton', ...
            'String', '?', ...
            'Units', 'Normalized', ...
            'Position', [0.9, 0.1,...
            0.1 / setupPanelRatio, 0.1 * setupPanelRatio], ...
            'Tag', 'runinfoSpecifyPathHelpButton',...
            'Callback', @open_runinfoSpecifyPathHelp); %#ok<NASGU>
        
                
        % Panel 2, optional Mask specification
        maskSelectionPanel = uipanel('BackgroundColor',get(0,'defaultUicontrolBackgroundColor'),...
            'Tag', 'maskSelectionPanel',...
            'Title', 'Mask',...
            'units', 'normalized',...
            'Position',[0.05, 0.35 0.9 0.25]); 
        
        maskPanelRatio  = maskSelectionPanel.Position(3) / maskSelectionPanel.Position(4); 
        
        manualMaskSelectionCheckbox = uicontrol('Parent', maskSelectionPanel,...
            'Style', 'checkbox', ...
            'Units', 'Normalized', ...
            'Position', [0.05, 0.7, 0.4, 0.25], ...
            'Tag', 'manualMaskSelectionCheckbox',...
            'String', 'Manually Select Mask Location',...
            'callback', @toggle_manual_mask_selection); %#ok<NASGU>
        
        maskSpecifyButton = uicontrol('Parent', maskSelectionPanel, ...
            'Style', 'pushbutton', ...
            'String', 'Select Mask', ...
            'Units', 'Normalized', ...
            'Position', [0.05, 0.2, 0.25, 0.4], ...
            'enable', 'off',...
            'Tag', 'maskSpecifyButton',...
            'Callback', @select_mask_file_callback); %#ok<NASGU>
        
        maskSpecifyPath = uicontrol('Parent', maskSelectionPanel, ...
            'Style', 'Edit', ...
            'Units', 'Normalized', ...
            'Position', [0.35, 0.2, 0.5, 0.4], ...
            'Tag', 'maskSpecifyPath', ...
            'enable', 'off',...
            'HorizontalAlignment','left',...
            'BackgroundColor','white'); %#ok<NASGU>
        
        maskSpecifyPathHelpButton = uicontrol('Parent', maskSelectionPanel, ...
            'Style', 'pushbutton', ...
            'String', '?', ...
            'Units', 'Normalized', ...
            'Position', [0.95, 0.6,...
            0.1 / maskPanelRatio, 0.1 * maskPanelRatio], ...
            'Tag', 'maskSpecifyPathHelpButton',...
            'Callback', @open_manualMaskSpecifyPathHelp); %#ok<NASGU>
        
        % Panel 3: Additional Options
        additionalOptionsPanel = uipanel('BackgroundColor',get(0,'defaultUicontrolBackgroundColor'),...
            'Tag', 'additionalOptionsPanel',...
            'Title', 'Additional Options',...
            'units', 'normalized',...
            'Position',[0.05, 0.17 0.9 0.15]); 
        
        includeSubjectLevelEstimatesCheckbox = uicontrol('Parent', additionalOptionsPanel,...
            'Style', 'checkbox', ...
            'Units', 'Normalized', ...
            'Position', [0.05, 0.3, 0.4, 0.4], ...
            'Tag', 'includeSubjectLevelEstimatesCheckbox',...
            'String', 'Include Subject-Level Component Estimates',...
            'Value', 0); %#ok<NASGU>
        
        analysisPrefixEditbox = uicontrol('Parent', additionalOptionsPanel, ...
            'Style', 'Edit', ...
            'Units', 'Normalized', ...
            'Position', [0.65, 0.2, 0.2, 0.7], ...
            'Tag', 'analysisPrefixEditbox', ...
            'enable', 'on',...
            'HorizontalAlignment','left',...
            'BackgroundColor','white'); %#ok<NASGU>
        
        analysisPrefixText = uicontrol('Parent', additionalOptionsPanel, ...
            'Style', 'Text', ...
            'Units', 'Normalized', ...
            'String', 'Analysis Prefix:',...
            'Position', [0.55, 0.3, 0.1, 0.5], ...
            'Tag', 'analysisPrefixText',...
            'HorizontalAlignment', 'Left'); %#ok<NASGU>
        
        % Bottom control buttons (OK, cancel, help)
        compileResultsButton = uicontrol('Style', 'pushbutton', ...
            'String', 'Compile Results', ...
            'Units', 'Normalized', ...
            'Position', [0.0625, 0.05, 0.25, 0.09], ...
            'Tag', 'compileResultsButton',...
            'Callback', @compile_results_callback); %#ok<NASGU>
        
        cancelButton = uicontrol('Style', 'pushbutton', ...
            'String', 'Cancel', ...
            'Units', 'Normalized', ...
            'Position', [0.375, 0.05, 0.25, 0.09], ...
            'Tag', 'cancelButton',...
            'Callback', @cancel_button_callback); %#ok<NASGU>
        
        helpButton = uicontrol('Style', 'pushbutton', ...
            'String', 'Help', ...
            'Units', 'Normalized', ...
            'Position', [0.6875, 0.05, 0.25, 0.09], ...
            'Tag', 'helpButton',...
            'Callback', @open_mainHelpWindow); %#ok<NASGU>
        
        
        
    end


    % TODO consider checking for results already in this folder.
    function select_output_folder_callback(src, event)
        
        % Request output folder from user
        folderName = uigetdir(pwd);
        
        % Handle case where user did not input anything
        if folderName==0
            folderName='';
        end
                
        set(findobj('Tag','outputPath'), 'String', folderName);
        
    end

    % Allow user to specify iteration results file
    function select_iteration_results_callback(src, event)
        
        % User input
        [fname pathname] = uigetfile('.mat');
        
        % Handle case where user did not input anything
        if fname==0
            set(findobj('Tag','iterResultsSpecifyPath'), 'String', '');
            return;
        else
            iterpath = fullfile(pathname, fname);
        end
        
        % Check that this is a valid results file
        isValid = check_valid_iteration_results_file(iterpath);
        
        if isValid
            set(findobj('Tag','iterResultsSpecifyPath'), 'String', iterpath);
        else
            warndlg('The specified file does not appear to contain results from the EM algorithm.',...
                'Invalid Iteration Results File')
            set(findobj('Tag','iterResultsSpecifyPath'), 'String', '');
        end
                
    end

    % Function to make sure that the selected iteration results file is
    % valid
    function isValid = check_valid_iteration_results_file(filePath)
        
        fileContents = who('-file', filePath);
        
        isValid = 1;
        
        if ~ismember('theta', fileContents) 
            isValid = 0;
        end

        if ~ismember('grpICmean', fileContents) 
            isValid = 0;
        end
        
        if ~ismember('beta', fileContents) 
            isValid = 0;
        end
                
    end

    % Allow user to specify runinfo file
    function select_runinfo_file_callback(src, event)
        
        % User input
        [fname pathname] = uigetfile('.mat');
        
        % Handle case where user did not input anything
        if fname==0
            set(findobj('Tag','runinfoSpecifyPath'), 'String', '');
            if get(findobj('tag', 'manualMaskSelectionCheckbox'), 'value')==0
                set(findobj('Tag','maskSpecifyPath'), 'String', '');
            end
            return;
        else
            runinfoPath = fullfile(pathname, fname);
        end
        
        % Check that this is a valid runinfo file
        isValid = verify_runinfo_valid(runinfoPath);
        
        if isValid
            set(findobj('Tag','runinfoSpecifyPath'), 'String', runinfoPath);
            
            % If manual mask selection is off, also read in the mask from
            % the runinfo file.
            if get(findobj('tag', 'manualMaskSelectionCheckbox'), 'value') == 0
                maskFile = load(runinfoPath, 'maskf');
                set(findobj('Tag','maskSpecifyPath'), 'String', maskFile.maskf);
            end
            
        else
            warndlg('The specified file does not appear to be a runinfo file.',...
                'Invalid Runinfo File')
            
            set(findobj('Tag','runinfoSpecifyPath'), 'String', '');
            
            if get(findobj('tag', 'manualMaskSelectionCheckbox'), 'value') == 0
                set(findobj('Tag','maskSpecifyPath'), 'String', '');
            end
            
        end
        
    end


    function toggle_manual_mask_selection(src, event)
        
        switch src.Value
            case 0
                
                % Disable mask specification
                set(findobj('tag', 'maskSpecifyButton'), 'enable', 'off');
                set(findobj('tag', 'maskSpecifyPath'), 'enable', 'off');
                
                % Reset to either an empty string, or the previously loaded
                % mask file if the runinfo file is already specified.
                currentRuninfoString = get(findobj('Tag','runinfoSpecifyPath'), 'String');
                if strcmp(currentRuninfoString, '')
                    set(findobj('Tag','maskSpecifyPath'), 'String', '');
                else
                    maskFile = load(currentRuninfoString, 'maskf');
                    set(findobj('Tag','maskSpecifyPath'), 'String', maskFile.maskf);
                end
                                
            case 1
                
                % enable the user to specify the mask file
                set(findobj('tag', 'maskSpecifyButton'), 'enable', 'on');
                set(findobj('tag', 'maskSpecifyPath'), 'enable', 'inactive');
                
        end
        
    end

    % Allow user to specify mask file
    function select_mask_file_callback(src, event)
        
        % User input
        [fname pathname] = uigetfile('.nii');
        
        % Handle case where user did not input anything
        if fname==0
            return;
        end
        
        % Set the string
        set(findobj('Tag','maskSpecifyPath'), 'String', fullfile(pathname, fname));
        
    end   

    
    %% Help Buttons

    % Select Output Folder Help Button
    function open_outputPathSpecifyPathHelp(src, event)
        help_compile_iter_window_output_path_specify;
    end

    % Select Iteration File Help Button
    function open_iterResultsSpecifyPathHelp(src, event)
        help_compile_iter_window_iterfile_specify;
    end

    % Select Runinfo File Help Button
    function open_runinfoSpecifyPathHelp(src, event)
        help_compile_iter_window_runinfo_specify;
    end

    % Manual Mask Selection Help Button
    function open_manualMaskSpecifyPathHelp(src, event)
        help_compile_iter_window_manual_mask_specify;
    end

    function open_mainHelpWindow(src, event)
        help_compile_iter_window_main_help;
    end


    %% Finalizing Buttons
    
    function compile_results_callback(src, event)
        
        % Check all fields filled out
        outputPathString = get(findobj('tag', 'outputPath'), 'String');
        if isempty(outputPathString)
            warndlg('Please specify an output folder before continuing',...
                'Missing Output Folder')
            return;
        end
        
        iterationPathString = get(findobj('tag', 'iterResultsSpecifyPath'),...
            'String');
        if isempty(iterationPathString)
            warndlg('Please specify an iteration results file before continuing',...
                'Missing EM Iteration Output')
            return;
        end
        
        runinfoPathString = get(findobj('tag', 'runinfoSpecifyPath'),...
            'String');
        if isempty(runinfoPathString)
            warndlg('Please specify a runinfo file before continuing',...
                'Missing HINT Runinfo File')
            return;
        end
        
        % Check that mask file exists
        maskFile = get(findobj('Tag','maskSpecifyPath'), 'String');
        if ~isfile(maskFile)
            warndlg(['Unable to locate a mask file at: ', maskFile],...
                'Invalid Mask File')
            return;
        end
        
        % Load any additional options
        prefix = get(findobj('tag', 'analysisPrefixEditbox'), 'string');
        includesubjlevelestimates = get(findobj('tag',...
            'includeSubjectLevelEstimatesCheckbox'), 'Value');
        
        % Compile the results
        compile_iteration_results(outputPathString, iterationPathString,...
            runinfoPathString, maskFile,...
            'isgui', 1,...
            'includesubjlevelestimates', includesubjlevelestimates,...
            'prefix', prefix);
        
    end

    function cancel_button_callback(src, event)
        delete(hs.fig);
    end

    


end

